//#################################################################//
#include "Bmp.h"
#include <IL/devil_cpp_wrapper.hpp>

void init_ilu_lib()
{
	static bool ini=false;

	if(!ini)
	{
		ilInit();
		iluInit();
		ini=true;
	}
}

//#################################################################//
Bmp::Bmp()
{
	init_ilu_lib();
	width=height=depth=0;
	data=NULL;
}
//#################################################################//
Bmp::Bmp(const char*filename)
{
	init_ilu_lib();
	width=height=depth=0;
	data=NULL;
	load(filename);
}
//#################################################################//
Bmp::Bmp(int x,int y,int b,unsigned char*buffer)
{
	init_ilu_lib();
	width=height=depth=0;
	data=NULL;
	set(x,y,b,buffer);
}
//#################################################################//
Bmp::~Bmp()
{
	if (data) free(data);
}
//#################################################################//
bool Bmp::save(const char*filename)
{
	// save 8 bit greyscale bmp
	{
		unsigned char bmp8[]={
				0x42, 0x4d, 0x36, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x04, 0x00, 0x00, 0x28, 0x00,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x13, 0x0b, 0x00, 0x00, 0x13, 0x0b, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x02, 0x02,
				0x02, 0x00, 0x03, 0x03, 0x03, 0x00, 0x04, 0x04, 0x04, 0x00, 0x05, 0x05, 0x05, 0x00, 0x06, 0x06,
				0x06, 0x00, 0x07, 0x07, 0x07, 0x00, 0x08, 0x08, 0x08, 0x00, 0x09, 0x09, 0x09, 0x00, 0x0a, 0x0a,
				0x0a, 0x00, 0x0b, 0x0b, 0x0b, 0x00, 0x0c, 0x0c, 0x0c, 0x00, 0x0d, 0x0d, 0x0d, 0x00, 0x0e, 0x0e,
				0x0e, 0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x10, 0x10, 0x10, 0x00, 0x11, 0x11, 0x11, 0x00, 0x12, 0x12,
				0x12, 0x00, 0x13, 0x13, 0x13, 0x00, 0x14, 0x14, 0x14, 0x00, 0x15, 0x15, 0x15, 0x00, 0x16, 0x16,
				0x16, 0x00, 0x17, 0x17, 0x17, 0x00, 0x18, 0x18, 0x18, 0x00, 0x19, 0x19, 0x19, 0x00, 0x1a, 0x1a,
				0x1a, 0x00, 0x1b, 0x1b, 0x1b, 0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x1d, 0x1d, 0x1d, 0x00, 0x1e, 0x1e,
				0x1e, 0x00, 0x1f, 0x1f, 0x1f, 0x00, 0x20, 0x20, 0x20, 0x00, 0x21, 0x21, 0x21, 0x00, 0x22, 0x22,
				0x22, 0x00, 0x23, 0x23, 0x23, 0x00, 0x24, 0x24, 0x24, 0x00, 0x25, 0x25, 0x25, 0x00, 0x26, 0x26,
				0x26, 0x00, 0x27, 0x27, 0x27, 0x00, 0x28, 0x28, 0x28, 0x00, 0x29, 0x29, 0x29, 0x00, 0x2a, 0x2a,
				0x2a, 0x00, 0x2b, 0x2b, 0x2b, 0x00, 0x2c, 0x2c, 0x2c, 0x00, 0x2d, 0x2d, 0x2d, 0x00, 0x2e, 0x2e,
				0x2e, 0x00, 0x2f, 0x2f, 0x2f, 0x00, 0x30, 0x30, 0x30, 0x00, 0x31, 0x31, 0x31, 0x00, 0x32, 0x32,
				0x32, 0x00, 0x33, 0x33, 0x33, 0x00, 0x34, 0x34, 0x34, 0x00, 0x35, 0x35, 0x35, 0x00, 0x36, 0x36,
				0x36, 0x00, 0x37, 0x37, 0x37, 0x00, 0x38, 0x38, 0x38, 0x00, 0x39, 0x39, 0x39, 0x00, 0x3a, 0x3a,
				0x3a, 0x00, 0x3b, 0x3b, 0x3b, 0x00, 0x3c, 0x3c, 0x3c, 0x00, 0x3d, 0x3d, 0x3d, 0x00, 0x3e, 0x3e,
				0x3e, 0x00, 0x3f, 0x3f, 0x3f, 0x00, 0x40, 0x40, 0x40, 0x00, 0x41, 0x41, 0x41, 0x00, 0x42, 0x42,
				0x42, 0x00, 0x43, 0x43, 0x43, 0x00, 0x44, 0x44, 0x44, 0x00, 0x45, 0x45, 0x45, 0x00, 0x46, 0x46,
				0x46, 0x00, 0x47, 0x47, 0x47, 0x00, 0x48, 0x48, 0x48, 0x00, 0x49, 0x49, 0x49, 0x00, 0x4a, 0x4a,
				0x4a, 0x00, 0x4b, 0x4b, 0x4b, 0x00, 0x4c, 0x4c, 0x4c, 0x00, 0x4d, 0x4d, 0x4d, 0x00, 0x4e, 0x4e,
				0x4e, 0x00, 0x4f, 0x4f, 0x4f, 0x00, 0x50, 0x50, 0x50, 0x00, 0x51, 0x51, 0x51, 0x00, 0x52, 0x52,
				0x52, 0x00, 0x53, 0x53, 0x53, 0x00, 0x54, 0x54, 0x54, 0x00, 0x55, 0x55, 0x55, 0x00, 0x56, 0x56,
				0x56, 0x00, 0x57, 0x57, 0x57, 0x00, 0x58, 0x58, 0x58, 0x00, 0x59, 0x59, 0x59, 0x00, 0x5a, 0x5a,
				0x5a, 0x00, 0x5b, 0x5b, 0x5b, 0x00, 0x5c, 0x5c, 0x5c, 0x00, 0x5d, 0x5d, 0x5d, 0x00, 0x5e, 0x5e,
				0x5e, 0x00, 0x5f, 0x5f, 0x5f, 0x00, 0x60, 0x60, 0x60, 0x00, 0x61, 0x61, 0x61, 0x00, 0x62, 0x62,
				0x62, 0x00, 0x63, 0x63, 0x63, 0x00, 0x64, 0x64, 0x64, 0x00, 0x65, 0x65, 0x65, 0x00, 0x66, 0x66,
				0x66, 0x00, 0x67, 0x67, 0x67, 0x00, 0x68, 0x68, 0x68, 0x00, 0x69, 0x69, 0x69, 0x00, 0x6a, 0x6a,
				0x6a, 0x00, 0x6b, 0x6b, 0x6b, 0x00, 0x6c, 0x6c, 0x6c, 0x00, 0x6d, 0x6d, 0x6d, 0x00, 0x6e, 0x6e,
				0x6e, 0x00, 0x6f, 0x6f, 0x6f, 0x00, 0x70, 0x70, 0x70, 0x00, 0x71, 0x71, 0x71, 0x00, 0x72, 0x72,
				0x72, 0x00, 0x73, 0x73, 0x73, 0x00, 0x74, 0x74, 0x74, 0x00, 0x75, 0x75, 0x75, 0x00, 0x76, 0x76,
				0x76, 0x00, 0x77, 0x77, 0x77, 0x00, 0x78, 0x78, 0x78, 0x00, 0x79, 0x79, 0x79, 0x00, 0x7a, 0x7a,
				0x7a, 0x00, 0x7b, 0x7b, 0x7b, 0x00, 0x7c, 0x7c, 0x7c, 0x00, 0x7d, 0x7d, 0x7d, 0x00, 0x7e, 0x7e,
				0x7e, 0x00, 0x7f, 0x7f, 0x7f, 0x00, 0x80, 0x80, 0x80, 0x00, 0x81, 0x81, 0x81, 0x00, 0x82, 0x82,
				0x82, 0x00, 0x83, 0x83, 0x83, 0x00, 0x84, 0x84, 0x84, 0x00, 0x85, 0x85, 0x85, 0x00, 0x86, 0x86,
				0x86, 0x00, 0x87, 0x87, 0x87, 0x00, 0x88, 0x88, 0x88, 0x00, 0x89, 0x89, 0x89, 0x00, 0x8a, 0x8a,
				0x8a, 0x00, 0x8b, 0x8b, 0x8b, 0x00, 0x8c, 0x8c, 0x8c, 0x00, 0x8d, 0x8d, 0x8d, 0x00, 0x8e, 0x8e,
				0x8e, 0x00, 0x8f, 0x8f, 0x8f, 0x00, 0x90, 0x90, 0x90, 0x00, 0x91, 0x91, 0x91, 0x00, 0x92, 0x92,
				0x92, 0x00, 0x93, 0x93, 0x93, 0x00, 0x94, 0x94, 0x94, 0x00, 0x95, 0x95, 0x95, 0x00, 0x96, 0x96,
				0x96, 0x00, 0x97, 0x97, 0x97, 0x00, 0x98, 0x98, 0x98, 0x00, 0x99, 0x99, 0x99, 0x00, 0x9a, 0x9a,
				0x9a, 0x00, 0x9b, 0x9b, 0x9b, 0x00, 0x9c, 0x9c, 0x9c, 0x00, 0x9d, 0x9d, 0x9d, 0x00, 0x9e, 0x9e,
				0x9e, 0x00, 0x9f, 0x9f, 0x9f, 0x00, 0xa0, 0xa0, 0xa0, 0x00, 0xa1, 0xa1, 0xa1, 0x00, 0xa2, 0xa2,
				0xa2, 0x00, 0xa3, 0xa3, 0xa3, 0x00, 0xa4, 0xa4, 0xa4, 0x00, 0xa5, 0xa5, 0xa5, 0x00, 0xa6, 0xa6,
				0xa6, 0x00, 0xa7, 0xa7, 0xa7, 0x00, 0xa8, 0xa8, 0xa8, 0x00, 0xa9, 0xa9, 0xa9, 0x00, 0xaa, 0xaa,
				0xaa, 0x00, 0xab, 0xab, 0xab, 0x00, 0xac, 0xac, 0xac, 0x00, 0xad, 0xad, 0xad, 0x00, 0xae, 0xae,
				0xae, 0x00, 0xaf, 0xaf, 0xaf, 0x00, 0xb0, 0xb0, 0xb0, 0x00, 0xb1, 0xb1, 0xb1, 0x00, 0xb2, 0xb2,
				0xb2, 0x00, 0xb3, 0xb3, 0xb3, 0x00, 0xb4, 0xb4, 0xb4, 0x00, 0xb5, 0xb5, 0xb5, 0x00, 0xb6, 0xb6,
				0xb6, 0x00, 0xb7, 0xb7, 0xb7, 0x00, 0xb8, 0xb8, 0xb8, 0x00, 0xb9, 0xb9, 0xb9, 0x00, 0xba, 0xba,
				0xba, 0x00, 0xbb, 0xbb, 0xbb, 0x00, 0xbc, 0xbc, 0xbc, 0x00, 0xbd, 0xbd, 0xbd, 0x00, 0xbe, 0xbe,
				0xbe, 0x00, 0xbf, 0xbf, 0xbf, 0x00, 0xc0, 0xc0, 0xc0, 0x00, 0xc1, 0xc1, 0xc1, 0x00, 0xc2, 0xc2,
				0xc2, 0x00, 0xc3, 0xc3, 0xc3, 0x00, 0xc4, 0xc4, 0xc4, 0x00, 0xc5, 0xc5, 0xc5, 0x00, 0xc6, 0xc6,
				0xc6, 0x00, 0xc7, 0xc7, 0xc7, 0x00, 0xc8, 0xc8, 0xc8, 0x00, 0xc9, 0xc9, 0xc9, 0x00, 0xca, 0xca,
				0xca, 0x00, 0xcb, 0xcb, 0xcb, 0x00, 0xcc, 0xcc, 0xcc, 0x00, 0xcd, 0xcd, 0xcd, 0x00, 0xce, 0xce,
				0xce, 0x00, 0xcf, 0xcf, 0xcf, 0x00, 0xd0, 0xd0, 0xd0, 0x00, 0xd1, 0xd1, 0xd1, 0x00, 0xd2, 0xd2,
				0xd2, 0x00, 0xd3, 0xd3, 0xd3, 0x00, 0xd4, 0xd4, 0xd4, 0x00, 0xd5, 0xd5, 0xd5, 0x00, 0xd6, 0xd6,
				0xd6, 0x00, 0xd7, 0xd7, 0xd7, 0x00, 0xd8, 0xd8, 0xd8, 0x00, 0xd9, 0xd9, 0xd9, 0x00, 0xda, 0xda,
				0xda, 0x00, 0xdb, 0xdb, 0xdb, 0x00, 0xdc, 0xdc, 0xdc, 0x00, 0xdd, 0xdd, 0xdd, 0x00, 0xde, 0xde,
				0xde, 0x00, 0xdf, 0xdf, 0xdf, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0xe1, 0xe1, 0xe1, 0x00, 0xe2, 0xe2,
				0xe2, 0x00, 0xe3, 0xe3, 0xe3, 0x00, 0xe4, 0xe4, 0xe4, 0x00, 0xe5, 0xe5, 0xe5, 0x00, 0xe6, 0xe6,
				0xe6, 0x00, 0xe7, 0xe7, 0xe7, 0x00, 0xe8, 0xe8, 0xe8, 0x00, 0xe9, 0xe9, 0xe9, 0x00, 0xea, 0xea,
				0xea, 0x00, 0xeb, 0xeb, 0xeb, 0x00, 0xec, 0xec, 0xec, 0x00, 0xed, 0xed, 0xed, 0x00, 0xee, 0xee,
				0xee, 0x00, 0xef, 0xef, 0xef, 0x00, 0xf0, 0xf0, 0xf0, 0x00, 0xf1, 0xf1, 0xf1, 0x00, 0xf2, 0xf2,
				0xf2, 0x00, 0xf3, 0xf3, 0xf3, 0x00, 0xf4, 0xf4, 0xf4, 0x00, 0xf5, 0xf5, 0xf5, 0x00, 0xf6, 0xf6,
				0xf6, 0x00, 0xf7, 0xf7, 0xf7, 0x00, 0xf8, 0xf8, 0xf8, 0x00, 0xf9, 0xf9, 0xf9, 0x00, 0xfa, 0xfa,
				0xfa, 0x00, 0xfb, 0xfb, 0xfb, 0x00, 0xfc, 0xfc, 0xfc, 0x00, 0xfd, 0xfd, 0xfd, 0x00, 0xfe, 0xfe,
				0xfe, 0x00, 0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x03, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
				0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x19,
				0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a,
				0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a,
				0x3a, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x45, 0x47, 0x48, 0x49, 0x4a,
				0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x53, 0x55, 0x56, 0x57, 0x57, 0x59, 0x5a,
				0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
				0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a,
				0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a,
				0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x94, 0x96, 0x97, 0x98, 0x99, 0x9a,
				0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa1, 0xa3, 0xa3, 0xa5, 0xa5, 0xa7, 0xa8, 0xa9, 0xaa,
				0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
				0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc7, 0xc9, 0xca,
				0xcb, 0xcb, 0xcd, 0xce, 0xce, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
				0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
				0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf0, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,
				0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

		if(bpp==8)
		{
			bmp8[18]	=width;
			bmp8[19]	=width>>8;
			bmp8[22]	=height;
			bmp8[23]	=height>>8;

			FILE* fn;
			if ((fn = fopen (filename,"wb")) != NULL)
			{
				fwrite(bmp8,1,1078   ,fn);
				fwrite(data,1,width*height*(bpp/8),fn);
				fclose(fn);
				return true;
			}
		}
	}

	unsigned char bmp[58]=
			{0x42,0x4D,0x36,0x30,0,0,0,0,0,0,0x36,0,0,0,0x28,0,0,0,
	           	0x40,0,0,0, // X-Size
	           	0x40,0,0,0, // Y-Size
                   	1,0,0x18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

	bmp[18]	=width;
	bmp[19]	=width>>8;
	bmp[22]	=height;
	bmp[23]	=height>>8;
	bmp[28]	=bpp;

	FILE* fn;
	if ((fn = fopen (filename,"wb")) != NULL)
	{
		fwrite(bmp ,1,54   ,fn);
		fwrite(data,1,width*height*(bpp/8),fn);
		fclose(fn);
		return true;
	}
	return false;
}
//#################################################################//
bool  Bmp::addalpha(unsigned char r,unsigned char g,unsigned char b)
{
  if(bpp==32)return true;

	unsigned char *data32=(unsigned char*)malloc(width*height*4);
	int x,y;
		for(x=0;x<width;x++)
			for(y=0;y<height;y++)
			{
				data32[(y*width+x)*4+0]=data[(y*width+x)*3+0];
				data32[(y*width+x)*4+1]=data[(y*width+x)*3+1];
				data32[(y*width+x)*4+2]=data[(y*width+x)*3+2];
				data32[(y*width+x)*4+3]=255;
				if(abs(r-data[(y*width+x)*3+0])<20)
				if(abs(g-data[(y*width+x)*3+1])<20)
				if(abs(b-data[(y*width+x)*3+2])<20)
				{
					data32[(y*width+x)*4+0]=0;
					data32[(y*width+x)*4+1]=0;
					data32[(y*width+x)*4+2]=0;
					data32[(y*width+x)*4+3]=0;
				}
			}
	free(data);
	data=data32;               
	bpp=32;
	
	return true;
}
//#################################################################//
bool  Bmp::normalize()
{
	int x,y,tmp;
	int bytes=bpp/8;
	int val0,val1,val2;

	if(bytes<3)return false;

	for(x=0;x<width;x++)
	for(y=0;y<height;y++)
	{
		tmp=0;
		val0=data[(y*width+x)*bytes+0];
		val1=255-val0;
		val2=data[(y*width+x)*bytes+2];
		val0=val0*(255-val2)/255;
		val1=val1*(255-val2)/255;

		data[(y*width+x)*bytes+0]=val0;
		data[(y*width+x)*bytes+1]=val1;
		data[(y*width+x)*bytes+2]=val2;
	}
	
	return true;
}
//#################################################################//
vec3f Bmp::get_f_fdx_fdy(float x,float y)
{
	float delta = 1.0f / 256.0f;
	//float zero = get_pixel(0,0).x;
	float fx = (get_pixel(x,y).x);///zero;//-get_pixel(0,0).x
	float dx1 = ((get_pixel(x+delta,y)-get_pixel(x,y)).x);///(zero*4*delta);
	float dy1 = ((get_pixel(x,y+delta)-get_pixel(x,y)).x);///(zero*4*delta);
	float dx2 = ((get_pixel(x,y)-get_pixel(x-delta,y)).x);///(zero*4*delta);
	float dy2 = ((get_pixel(x,y)-get_pixel(x,y-delta)).x);///(zero*4*delta);

	return vec3f(fx,(dx1+dx2)/2,(dy1+dy2)/2);

	/*
	vec3f normal;	 
	vec3f tan   = vec3f( delta , dx , 0); 
	vec3f cotan = vec3f( dy , delta , 0);
	normal.cross(tan,cotan);

	normal.normalize();
	tan.normalize();
	cotan.normalize();

	matrix44 mat44;

	mat44.m[0][0] = 1;//normal.x;
	mat44.m[0][1] = 0;//normal.y;
	mat44.m[0][2] = 0;//normal.z;
	mat44.m[0][3] = 0;
	mat44.m[1][0] = 0;//cotan.x;
	mat44.m[1][1] = 1;//cotan.y;
	mat44.m[1][2] = 0;//cotan.z;
	mat44.m[1][3] = 0;
	mat44.m[2][0] = 0;//tan.x;
	mat44.m[2][1] = 0;//tan.y;
	mat44.m[2][2] = 1;//tan.z;
	mat44.m[2][3] = 0;
	mat44.m[3][0] = 0;
	mat44.m[3][1] = pos.x;
	mat44.m[3][2] = 0;
	mat44.m[3][3] = 1;

	mat44.m[0][0] = tan.x;//normal.x;
	mat44.m[0][1] = tan.y;//normal.y;
	mat44.m[0][2] = 0;//normal.z;
	mat44.m[0][3] = 0;
	mat44.m[1][0] = cotan.x;
	mat44.m[1][1] = cotan.y;
	mat44.m[1][2] = 0;//cotan.z;
	mat44.m[1][3] = 0;
	mat44.m[2][0] = normal.x;//tan.x;
	mat44.m[2][1] = normal.y;//tan.y;
	mat44.m[2][2] = normal.z;//tan.z;
	mat44.m[2][3] = 0;
	mat44.m[3][0] = pos.x/zero+1;
	mat44.m[3][1] = pos.x/zero+1;
	mat44.m[3][2] = pos.x/zero+1;
	mat44.m[3][3] = 1;

	return mat44;
	*/
}
	//#################################################################//
// scale x scale y translate
vec3f Bmp::getSxSyT(float x)
{
	bool find_r=true; int y_r = 1;
	bool find_g=true; int y_g = 1;
	bool find_b=true; int y_b = 1;

	int ix = int(x*float(width));

	for (int y = height-1;y>=0;y--)
	{
		int ofs = (y*width+ix)*(bpp/8);
		bool b = (data[ofs+0]>128) ? true : false;
		bool g = (data[ofs+1]>128) ? true : false;
		bool r = (data[ofs+2]>128) ? true : false;

		if (find_r) if (!r)
		{
			find_r = false;
			y_r = y;
		}
		if (find_g) if (!g)
		{
			find_g = false;
			y_g = y;
		}
		if (find_b) if (!b)
		{
			find_b = false;
			y_b = y;
		}
	}
	return vec3f (
			float(y_r)/float(height),
			float(y_g)/float(height),
			float(y_b)/float(height)
		);
}
//#################################################################//
vec3f Bmp::get_pixel(float x,float y)
{
	if(x<0)x=0;
	if(y<0)y=0;
	if(x>1)x=1;
	if(y>1)y=1;
  int ofs = (int(y*float(height-1))*width+int(x*float(width-1)) )*(bpp/8);

  float b = float(data[ofs+0])/255.0f;

  if(bpp==8) return vec3f(b,b,b);

  float g = float(data[ofs+1])/255.0f;
  float r = float(data[ofs+2])/255.0f;
  
  return vec3f(r,g,b);
}
//#################################################################//
inline int Bmp::sampleByte(int x,int y)
{
  return (data[(  ((height-1-y)%height)*width+x%width )*(bpp/8)]);
}
//#################################################################//
inline int Bmp::sampleMap(int x,int y)
{
  return (255-data[(  (y%height)*width+x%width )*(bpp/8)]);
}
//#################################################################//
bool Bmp::normalMap(void)
{
	unsigned char* tmpData=(unsigned char*)malloc(width*height*3);

	for(int y=0;y<height;y++)
	for(int x=0;x<width;x++)
	{
		int h0=sampleMap(x, y);
		int hs=sampleMap(x-3, y);
		int ht=sampleMap(x, y-3);

		vec3f vs(10,0,float(hs-h0));
		vec3f vt(0,10,float(ht-h0));
		vec3f n;
		n.cross(vs,vt);
		n.normalize();

		tmpData[(x+y*width)*3+0]=(unsigned char)((float)(n.x*100+128));
		tmpData[(x+y*width)*3+1]=(unsigned char)((float)(n.y*100+128));
		tmpData[(x+y*width)*3+2]=(unsigned char)((float)(n.z*100+128));
	}

	free(data);

	bpp=24;
	data=tmpData;

	return true;
}
//#################################################################//
bool  Bmp::blur(int count)
{
	int x,y,b,c;
	int bytes=bpp/8;
	for(c=0;c<count;c++)
		for(x=0;x<width-1;x++)
			for(y=0;y<height-1;y++)
				for(b=0;b<bytes;b++)
					data[(y*width+x)*bytes+b]=
					    (	(int)data[((y+0)*width+x+0)*bytes+b]+
					      (int)data[((y+0)*width+x+1)*bytes+b]+
					      (int)data[((y+1)*width+x+0)*bytes+b]+
					      (int)data[((y+1)*width+x+1)*bytes+b] ) /4;

	return true;
}
//#################################################################//
bool  Bmp::hblur(int count)
{
	int x,y,b,a;
	int bytes=bpp/8;

	for(a=0;a<count;a++)
		for(x=0;x<width-1;x++)
			for(y=0;y<height;y++)
				for(b=0;b<bytes;b++)
					data[(y*width+x)*bytes+b]=
					    (	(int)data[((y+0)*width+x+0)*bytes+b]+
					      (int)data[((y+0)*width+x+1)*bytes+b]
					    ) /2;

	return true;
}
//#################################################################//
bool  Bmp::vblur(int count)
{
	int x,y,b,a;
	int bytes=bpp/8;

	for(a=0;a<count;a++)
		for(x=0;x<width;x++)
			for(y=0;y<height-1;y++)
				for(b=0;b<bytes;b++)
					data[(y*width+x)*bytes+b]=
					    (	(int)data[((y+0)*width+x+0)*bytes+b]+
					      (int)data[((y+1)*width+x+0)*bytes+b]
					    ) /2;

	return true;
}
//#################################################################//
void Bmp::crop(int x,int y)
{
	if(data==NULL)return;

	unsigned char* newdata;
	int i,j;

	int bytes=bpp/8;

	newdata=(unsigned char*)malloc(x*y*bytes);

	memset(newdata,0,x*y*bytes);

	for(i=0;i<y;i++)
		if(i<height)
			for(j=0;j<x*bytes;j++)
				if(j<width*bytes)
					newdata[i*x*bytes+j]=data[i*width*bytes+j];
	free(data);
	data=NULL;
	set(x,y,bpp,newdata);
}
//#################################################################//
bool Bmp::scale(int x,int y)
{
	if(data==NULL)return false;
	if(x==0)return false;
	if(y==0)return false;

	unsigned char* newdata;
	int i,j,k;

	int bytes=bpp/8;
	newdata=(unsigned char*)malloc(x*y*bytes);
	memset(newdata,0,x*y*bytes);

	for(i=0;i<y;i++)
		for(j=0;j<x;j++)
			for(k=0;k<bytes;k++)
				newdata[i*x*bytes+j*bytes+k]=data[(i*height/y)*(width*bytes)+(j*width/x)*bytes+k];

	free(data);
	data=NULL;
	set(x,y,bpp,newdata);
	return true;
}
//#################################################################//
bool Bmp::set(int x,int y,int b,unsigned char*buffer)
{
	width=x;
	height=y;
	bpp=b;
	if(data) free(data);
	data=0;//(unsigned char*)malloc(width*height*bpp/8);//buffer;
	if(data==NULL)
	{
		data=(unsigned char*) malloc(width*height*(bpp/8));
		memset(data,0,width*height*(bpp/8));
	}
	if(buffer)memcpy(data,buffer,width*height*(bpp/8));

	bmp[18]	=width;
	bmp[19]	=width>>8;
	bmp[22]	=height;
	bmp[23]	=height>>8;
	bmp[28]	=bpp;

	return true;
}
//#################################################################//
bool Bmp::set3d(int x,int y,int z,int b,unsigned char*buffer)
{
	width=x;
	height=y;
	depth=z;
	bpp=b;
	if(data) free(data);
	data=buffer;
	if(data==NULL)
	{
		data=(unsigned char*) malloc(width*height*depth*(bpp/8));
		memset(data,0,width*height*depth*(bpp/8));
	}

	bmp[18]	=width;
	bmp[19]	=width>>8;
	bmp[22]	=height;
	bmp[23]	=height>>8;
	bmp[28]	=bpp;

	return true;
}
//#################################################################//
void Bmp::load(const char *filename)
{
	ilImage i;
	if(!i.Load(filename))
	{
		printf("Bmp::load file %s not found\n",filename);
		while(1);;
		return;
	}
	

	if(i.GetData()==0)
	{
		printf("Bmp::load 0 pointer\n");
		while(1);;
	}
	
	if(i.Format()==IL_RGB)	i.Convert(IL_BGR);
	if(i.Format()==IL_RGBA)	i.Convert(IL_BGRA);

	set(i.Width(),i.Height(),i.Bpp()*8,i.GetData());
}

//#################################################################//
